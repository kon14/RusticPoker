syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package rustic_poker;


// ***** RPCs *****

service RusticPoker {
  // [Authentication]
  rpc Connect(ConnectRequest) returns (google.protobuf.Empty);
  rpc Disconnect(google.protobuf.Empty) returns (google.protobuf.Empty);

  // [Game]
  rpc WatchState(google.protobuf.Empty) returns (stream GameState);

  // [Lobby]
  rpc GetLobbies(google.protobuf.Empty) returns (GetLobbiesResponse);
  rpc CreateLobby(CreateLobbyRequest) returns (LobbyInfoPublic);
  rpc JoinLobby(JoinLobbyRequest) returns (google.protobuf.Empty);
  rpc LeaveLobby(google.protobuf.Empty) returns (google.protobuf.Empty);
//  rpc KickLobbyPlayer(KickLobbyPlayerRequest) returns (google.protobuf.Empty);
  rpc SetLobbyMatchmakingStatus(SetLobbyMatchmakingStatusRequest) returns (google.protobuf.Empty);
  rpc RespondLobbyMatchmaking(RespondLobbyMatchmakingRequest) returns (google.protobuf.Empty);
  rpc StartLobbyGame(google.protobuf.Empty) returns (google.protobuf.Empty);
//  rpc SetLobbySettings(LobbySettings) returns (google.protobuf.Empty);

  // [Game]
  rpc RespondBettingPhase(RespondBettingPhaseRequest) returns (google.protobuf.Empty);
  rpc RespondDrawingPhase(RespondDrawingPhaseRequest) returns (google.protobuf.Empty);
}


// ***** Types *****

message ConnectRequest {
  //  string user_name = 1;
}

message LobbyInfoPublic {
  string lobby_id = 1;
  string name = 2;
  string host_player_id = 3;
  uint32 player_count = 4;
  LobbyStatus status = 5;
}

message GameState {
  PlayerState player_state = 1;
  LobbyState lobby_state = 2;
  optional MatchState match_state = 3;
  google.protobuf.Timestamp timestamp = 4;

  message MatchState {
    string match_id = 1;
    map<string, MatchStatePlayerPublicInfo> player_info = 2;
    map<string, MatchStateCreditPot> credit_pots = 3;
    repeated Card own_cards = 4;
    map<string, uint64> player_bet_amounts = 5; // only live players, pre-showdown
    PokerPhase poker_phase = 6; // phase-specific data
    bool can_i_act = 7;

    message MatchStatePlayerPublicInfo {
      string player_id = 1;
      //  string name = 2;
      uint64 starting_credits = 2;
      uint64 remaining_credits = 3;
      map<string, uint64> pot_credits = 4;
      uint32 hand_card_count = 5;
    }

    message MatchStateCreditPot {
      string pot_id = 1;
      bool is_main_pot = 2;
      uint64 total_credits = 3;
      map<string, uint64> player_credits = 4;
    }
  }

  message PokerPhase {
    oneof phase {
      google.protobuf.Empty ante = 1;
      google.protobuf.Empty dealing = 2;
      PokerPhaseBetting first_betting = 3;
      PokerPhaseDrawing drawing = 4;
      PokerPhaseBetting second_betting = 5;
      PokerPhaseShowdown showdown = 6;
    }

    message PokerPhaseBetting {
      optional uint64 highest_bet_amount = 1;
      optional uint64 own_bet_amount = 2;
    }

    message PokerPhaseDrawing {
      bool discard_stage = 1;
      repeated Card own_discarded_cards = 2;
      // TODO: list map<Uuid, u32> player_discarded_card_count ? or infer by cand count in base state ?
    }

    message PokerPhaseShowdown {
      optional ShowdownResults results = 1;

      message ShowdownResults {
        PokerHandRank winning_rank = 1;
        repeated string winner_ids = 2;
        repeated ShowdownPotDistribution pot_distribution = 3;
        // TODO: own_winnings uint64 (compound total)
        // TODO: pre-calculated did_I_win own result bool field

        enum PokerHandRank {
          RoyalFlush = 0;
          StraightFlush = 1;
          FourOfAKind = 2;
          FullHouse = 3;
          Flush = 4;
          Straight = 5;
          ThreeOfAKind = 6;
          TwoPair = 7;
          Pair = 8;
          HighCard = 9;
        }

        message ShowdownPotDistribution {
          string pot_id = 1;
          repeated string player_ids = 2;
          uint64 total_credits = 3;
          uint64 credits_per_winner = 4;
        }
      }
    }
  }
}

message PlayerState {
  string player_id = 1;
  string name = 2;
}

message LobbyState {
  string lobby_id = 1;
  string name = 2;
  string host_player_id = 3;
  repeated string player_ids = 4;
  LobbyStatus status = 5;
  map<string, bool> game_acceptance = 6; // player_id -> bool
  LobbySettings settings = 7;
}

enum LobbyStatus {
  IDLE = 0;
  MATCHMAKING = 1;
  IN_GAME = 2;
}

message LobbySettings {
  GameMode game_mode = 1;
  uint32 min_players = 2;
  uint32 max_players = 3;
  uint64 ante_amount = 4;
  //  uint64 min_bet_amount = 5;
  //  uint64 max_bet_amount = 6;
  //  uint64 time_per_hand = 7;

  enum GameMode {
    SINGLE = 0;
    //    TOURNAMENT = 1;
  }
}

message GetLobbiesResponse {
  repeated LobbyInfoPublic lobbies = 1;
}

message CreateLobbyRequest {
  string lobby_name = 1;
}

message JoinLobbyRequest {
  string lobby_id = 1;
}

//message KickLobbyPlayerRequest {
//  string player_id = 1;
//}

message Card {
  CardRank rank = 1;
  CardSuit suit = 2;

  enum CardSuit {
    Diamonds = 0;
    Hearts = 1;
    Clubs = 2;
    Spades = 3;
  }

  enum CardRank {
    Ace = 0;
    Two = 1;
    Three = 2;
    Four = 3;
    Five = 4;
    Six = 5;
    Seven = 6;
    Eight = 7;
    Nine = 8;
    Ten = 9;
    Jack = 10;
    Queen = 11;
    King = 12;
  }
}

message SetLobbyMatchmakingStatusRequest {
  MatchmakingStatus status = 1;

  enum MatchmakingStatus {
    NOT_MATCHMAKING = 0;
    MATCHMAKING = 1;
  }
}

message RespondLobbyMatchmakingRequest {
  MatchmakingDecision decision = 1;

  enum MatchmakingDecision {
    ACCEPT = 0;
    DECLINE = 1;
  }
}

message RespondBettingPhaseRequest {
  oneof BettingAction {
    uint64 bet = 1;
    google.protobuf.Empty call = 2;
    uint64 raise_bet = 3;
    google.protobuf.Empty fold = 4;
  }
}

message RespondDrawingPhaseRequest {
  repeated Card discarded_cards = 1;
}
