syntax = "proto3";
import "google/protobuf/empty.proto";
package rustic_poker;

service RusticPoker {
  rpc RateHands(RateHandsRequest) returns (RateHandsResponse);
  // Server
  rpc Connect(ConnectRequest) returns (google.protobuf.Empty);
  rpc Disconnect(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc Heartbeat(stream google.protobuf.Empty) returns (google.protobuf.Empty);
  // Lobby
  rpc GetLobbies(google.protobuf.Empty) returns (GetLobbiesResponse);
  rpc CreateLobby(CreateLobbyRequest) returns (google.protobuf.Empty);
  rpc JoinLobby(JoinLobbyRequest) returns (google.protobuf.Empty);
  rpc LeaveLobby(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc KickLobbyPlayer(KickLobbyPlayerRequest) returns (google.protobuf.Empty);
  rpc GetLobbyState(google.protobuf.Empty) returns (LobbyInfoPrivate);
  rpc SetLobbyMatchmakingStatus(SetLobbyMatchmakingStatusRequest) returns (google.protobuf.Empty);
  rpc RespondMatchmaking(RespondStartGameRequest) returns (google.protobuf.Empty);
}

message RateHandsRequest {
  repeated string hands = 1; // hand format: "AD KD QD JD 10D"
}

message RateHandsResponse {
  repeated string winners = 1;
}

message ConnectRequest {
  string user_name = 1;
}

message PlayerInfo {
  string id = 1;
  string name = 2;
  uint64 credits = 3;
}

enum LobbyStatus {
  IDLE = 0;
  MATCHMAKING = 1;
  IN_GAME = 2;
}

message LobbyInfoPublic {
  string id = 1;
  string name = 2;
  string host_user = 3;
  uint32 player_count = 4;
}

message LobbyInfoPrivate {
  string id = 1;
  string name = 2;
  string host_user = 3;
  repeated PlayerInfo players = 4;
  LobbyStatus status = 5;
  map<string, bool> matchmaking_acceptance = 6; // user ID -> accept
}

message GetLobbiesResponse {
  repeated LobbyInfoPublic lobbies = 1;
}

message CreateLobbyRequest {
  string lobby_name = 1;
}

message JoinLobbyRequest {
  string lobby_id = 1;
}

message KickLobbyPlayerRequest {
  string user_id = 1;
}

message SetLobbyMatchmakingStatusRequest {
  enum MatchmakingStatus {
    NOT_MATCHMAKING = 0;
    MATCHMAKING = 1;
  }
  MatchmakingStatus status = 1;
}

message RespondStartGameRequest {
  bool accept = 1;
}
